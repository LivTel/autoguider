/* pco_command.cpp
** Autoguider PCO CMOS library
*/
/**
 * Command wrapper around the PCO SDK library.
 * @author Chris Mottram
 * @version $Id$
 */
/**
 * This hash define is needed before including source files give us POSIX.4/IEEE1003.1b-1993 prototypes.
 */
#define _POSIX_SOURCE 1
/**
 * This hash define is needed before including source files give us POSIX.4/IEEE1003.1b-1993 prototypes.
 */
#define _POSIX_C_SOURCE 199309L

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <stdarg.h>
#include <unistd.h>
#include "log_udp.h"
#include "VersionNo.h"
#include "Cpco_com.h"
#include "Cpco_grab_usb.h"
/*
 *  PCO_errt_w.h produces loads of -Wwrite-strings warnings when compiled, so turn off this warning for
 * this source file.
 */
#pragma GCC diagnostic ignored "-Wwrite-strings"
/**
 * Define PCO_ERRT_H_CREATE_OBJECT before including PCO_errt_w.h to enable the PCO_GetErrorText
 * function to be defined.
 */
#define PCO_ERRT_H_CREATE_OBJECT
/**
 * It is required by PCO_errt_w.h to define a sprintf_s function. PCO_errt_w.h defines one in the header
 * file for Microsoft C, here we declare sprintf_s as snprintf which should work for Linux.
 */
#define sprintf_s snprintf
#include "PCO_errt_w.h"
#include "ccd_general.h"
#include "pco_command.h"


/* check CCD_COMMAND_SETUP_FLAG enums match PCO_EDGE_SETUP #defines.
** We create our own enum so we don't have to include PCO SDK headers outside pco_command.cpp, for better
** code separation from the SDK */
/* THESE TESTS DON'T WORK, probably because one in an enumeration and one is an int.
#if CCD_COMMAND_SETUP_FLAG_ROLLING_SHUTTER != PCO_EDGE_SETUP_ROLLING_SHUTTER
#error "CCD_COMMAND_SETUP_FLAG_ROLLING_SHUTTER does not match PCO_EDGE_SETUP_ROLLING_SHUTTER declaration"
#endif
#if CCD_COMMAND_SETUP_FLAG_GLOBAL_SHUTTER != PCO_EDGE_SETUP_GLOBAL_SHUTTER
#error "CCD_COMMAND_SETUP_FLAG_GLOBAL_SHUTTER does not match PCO_EDGE_SETUP_GLOBAL_SHUTTER declaration"
#endif
#if CCD_COMMAND_SETUP_FLAG_GLOBAL_RESET != PCO_EDGE_SETUP_GLOBAL_RESET
#error "CCD_COMMAND_SETUP_FLAG_GLOBAL_RESET does not match PCO_EDGE_SETUP_GLOBAL_RESET declaration"
#endif
*/

/* data types */
/**
 * Data type holding local data to pco_command. This consists of the following:
 * <dl>
 * <dt>Camera</dt> <dd>The instance of CPco_com used to communicate with the PCO camera. </dd>
 * <dt>Grabber</dt> <dd>The instance of CPco_grab_usb used to grab images from the PCO camera. </dd>
 * <dt>PCO_Logger</dt> <dd>The instance of CPco_Log used to receive logging from the PCO library.</dd>
 * <dt>Camera_Board</dt> <dd>The board number passed to Open_Cam.</dd>
 * <dt>Grabber_Timeout</dt> <dd>The timeout for grabbing images, in milliseconds.</dd>
 * <dt>Description</dt> <dd>The camera description returned from PCO_GetCameraDescriptor.</dd>
 * </dl>
 */
struct Command_Struct
{
	CPco_com *Camera;
	CPco_grab_usb* Grabber;
	CPco_Log* PCO_Logger;
	int Camera_Board;
	int Grabber_Timeout;
	SC2_Camera_Description_Response Description;
};

/* internal variables */
/**
 * Revision Control System identifier.
 */
static char rcsid[] = "$Id$";
/**
 * The instance of Command_Struct that contains local data for this module. This is initialised as follows:
 * <dl>
 * <dt>Camera</dt> <dd>NULL</dd>
 * <dt>Grabber</dt> <dd>NULL</dd>
 * <dt>PCO_Logger</dt> <dd>NULL</dd>
 * <dt>Camera_Board</dt> <dd>0</dd>
 * <dt>Grabber_Timeout</dt> <dd>40000</dd> (The PCO Edge's maximum exposure length is 20s).
 * <dt>Description</dt> <dd>{}</dd>
 * </dl>
 * @see #Command_Struct
 */
static struct Command_Struct Command_Data = 
{
	NULL,NULL,NULL,0,40000,
};

/**
 * A buffer to store the error string generated by a call to Command_PCO_Get_Error_Text.
 * @see #CCD_GENERAL_ERROR_STRING_LENGTH
 */
static char Command_PCO_Error_String[CCD_GENERAL_ERROR_STRING_LENGTH] = "";

/* internal functions */
static char *Command_PCO_Get_Error_Text(DWORD pco_err);
static int Command_BCD_To_Decimal(unsigned char x);

/* --------------------------------------------------------
** External Functions
** -------------------------------------------------------- */
/**
 * Initialise the PCO library Camera reference. 
 * @return The routine returns TRUE on success and FALSE if an error occurs.
 * @see #Command_Data
 * @see ../../cdocs/ccd_general.html#CCD_General_Error_Number
 * @see ../../cdocs/ccd_general.html#CCD_General_Error_String
 * @see ../../cdocs/ccd_general.html#CCD_General_Log
 */
int PCO_Command_Initialise_Camera(void)
{
#ifdef PCO_DEBUG
	CCD_General_Log("ccd","pco_command.cpp","PCO_Command_Initialise_Camera",LOG_VERBOSITY_TERSE,NULL,"Started.");
#endif
	CCD_General_Error_Number = 0;
#ifdef PCO_DEBUG
	CCD_General_Log("ccd","pco_command.cpp","PCO_Command_Initialise_Camera",LOG_VERBOSITY_INTERMEDIATE,NULL,
			"Creating CPco_com_usb instance.");
#endif
	Command_Data.Camera = new CPco_com_usb();
	if(Command_Data.Camera == NULL)
	{
		CCD_General_Error_Number = 1100;
		sprintf(CCD_General_Error_String,
			"PCO_Command_Initialise_Camera:Creating CPco_com_usb instance failed.");
		return FALSE;
	}
#ifdef PCO_DEBUG
	CCD_General_Log("ccd","pco_command.cpp","PCO_Command_Initialise_Camera",LOG_VERBOSITY_INTERMEDIATE,NULL,
			"Creating CPco_Log instance.");
#endif 
	Command_Data.PCO_Logger = new CPco_Log("pco_camera_grab.log");
	if(Command_Data.PCO_Logger == NULL)
	{
		CCD_General_Error_Number =1101;
		sprintf(CCD_General_Error_String,"PCO_Command_Initialise_Camera:Creating CPco_Log instance failed.");
		return FALSE;
	}
#ifdef PCO_DEBUG
	CCD_General_Log("ccd","pco_command.cpp","PCO_Command_Initialise_Camera",LOG_VERBOSITY_INTERMEDIATE,NULL,
			"Initialising CPco_Log instance.");
#endif
 	Command_Data.PCO_Logger->set_logbits(0x3);
	Command_Data.Camera->SetLog(Command_Data.PCO_Logger);
#ifdef PCO_DEBUG
	CCD_General_Log("ccd","pco_command.cpp","PCO_Command_Initialise_Camera",LOG_VERBOSITY_TERSE,NULL,"Finished.");
#endif
	return TRUE;
}

/**
 * Finalise (finish using) the CCD library. 
 * @return The routine returns TRUE on success and FALSE if an error occurs.
 * @see #Command_Data
 * @see ../../cdocs/ccd_general.html#CCD_General_Error_Number
 * @see ../../cdocs/ccd_general.html#CCD_General_Error_String
 * @see ../../cdocs/ccd_general.html#CCD_General_Log
 */
int PCO_Command_Finalise(void)
{
#ifdef PCO_DEBUG
	CCD_General_Log("ccd","pco_command.cpp","PCO_Command_Finalise",LOG_VERBOSITY_TERSE,NULL,"Started.");
#endif
	if(Command_Data.Grabber != NULL)
	{
#ifdef PCO_DEBUG
		CCD_General_Log("ccd","pco_command.cpp","PCO_Command_Finalise",LOG_VERBOSITY_VERY_VERBOSE,NULL,
				"Deleting Grabber object.");
#endif
		delete Command_Data.Grabber;
	}
	Command_Data.Grabber = NULL;
	if(Command_Data.Camera != NULL)
	{
#ifdef PCO_DEBUG
		CCD_General_Log("ccd","pco_command.cpp","PCO_Command_Finalise",LOG_VERBOSITY_VERY_VERBOSE,NULL,
				"Deleting Camera object.");
#endif
		delete Command_Data.Camera;
	}
	Command_Data.Camera = NULL;
	if(Command_Data.PCO_Logger != NULL)
	{
#ifdef PCO_DEBUG
		CCD_General_Log("ccd","pco_command.cpp","PCO_Command_Finalise",LOG_VERBOSITY_VERY_VERBOSE,NULL,
				"Deleting PCO_Logger object");
#endif
		delete Command_Data.PCO_Logger;
	}
	Command_Data.PCO_Logger = NULL;
#ifdef PCO_DEBUG
	CCD_General_Log("ccd","pco_command.cpp","PCO_Command_Finalise",LOG_VERBOSITY_TERSE,NULL,"Finished.");
#endif
	return TRUE;
}

/**
 * Open a connection to the PCO camera and get a camera handle.
 * <ul>
 * <li>We check the Camera CPco_com_usb instance has been created.
 * <li>We set Command_Data.Camera_Board to the board parameter.
 * <li>We call the Camera's Open_Cam method with the board parameter to open a connection to the board.
 * <li>We get the camera's description by calling PCO_GetCameraDescriptor and store it in Command_Data.Description.
 * </ul>
 * @param board Which camera to connect to.
 * @return The routine returns TRUE on success and FALSE if it fails.
 * @see #Command_Data
 * @see #Command_PCO_Get_Error_Text
 * @see ../../cdocs/ccd_general.html#CCD_GENERAL_ONE_SECOND_MS
 * @see ../../cdocs/ccd_general.html#CCD_GENERAL_ONE_MILLISECOND_NS
 * @see ../../cdocs/ccd_general.html#CCD_GENERAL_ONE_SECOND_NS
 * @see ../../cdocs/ccd_general.html#CCD_General_Error_Number
 * @see ../../cdocs/ccd_general.html#CCD_General_Error_String
 * @see ../../cdocs/ccd_general.html#CCD_General_Log
 * @see ../../cdocs/ccd_general.html#CCD_General_Log_Format
 */
int PCO_Command_Open(int board)
{
	DWORD pco_err;

#ifdef PCO_DEBUG
	CCD_General_Log_Format("ccd","pco_command.cpp","PCO_Command_Open",LOG_VERBOSITY_TERSE,NULL,
			       "Started for board %d.",board);
#endif
	if(Command_Data.Camera == NULL)
	{
		CCD_General_Error_Number = 1102;
		sprintf(CCD_General_Error_String,"PCO_Command_Open:Camera CPco_com_usb instance not created.");
		return FALSE;
	}
	Command_Data.Camera_Board = board;
#ifdef PCO_DEBUG
	CCD_General_Log_Format("ccd","pco_command.cpp","PCO_Command_Open",LOG_VERBOSITY_INTERMEDIATE,NULL,
			       "Calling Open_Cam(%d).",Command_Data.Camera_Board);
#endif
	pco_err = Command_Data.Camera->Open_Cam(Command_Data.Camera_Board);
	if(pco_err != PCO_NOERROR)
	{
		CCD_General_Error_Number = 1103;
		sprintf(CCD_General_Error_String,
			"PCO_Command_Open:Camera Open_Cam(board=%d) failed with PCO error code 0x%x (%s).",
			Command_Data.Camera_Board,pco_err,Command_PCO_Get_Error_Text(pco_err));
		return FALSE;
	}
#ifdef PCO_DEBUG
	CCD_General_Log_Format("ccd","pco_command.cpp","PCO_Command_Open",LOG_VERBOSITY_INTERMEDIATE,NULL,
			       "Getting camera description.");
#endif
	pco_err = Command_Data.Camera->PCO_GetCameraDescriptor(&(Command_Data.Description));
	if(pco_err != PCO_NOERROR)
	{
		CCD_General_Error_Number = 1104;
		sprintf(CCD_General_Error_String,
			"PCO_Command_Open:Camera PCO_GetCameraDescriptor failed with PCO error code 0x%x (%s).",
			pco_err,Command_PCO_Get_Error_Text(pco_err));
		return FALSE;
	}
#ifdef PCO_DEBUG
	CCD_General_Log("ccd","pco_command.cpp","PCO_Command_Open",LOG_VERBOSITY_TERSE,NULL,"Finished.");
#endif
	return TRUE;
}

/* =======================================
**  internal functions 
** ======================================= */
/**
 * This function is a wrapper to the PCO_GetErrorText routine imported from the PCO_errt_w.h.
 * This allows us to produce a descriptive string for the specified PCO error code.
 * @param pco_err The PCO error code to provide a descriptive string for.
 * @return A pointer to a string containing the descriptive string for the PCO error code. The
 *         string pointer to is always Command_PCO_Error_String.
 * @see #CCD_GENERAL_ERROR_STRING_LENGTH
 * @see #Command_PCO_Error_String
 */
static char *Command_PCO_Get_Error_Text(DWORD pco_err)
{
	PCO_GetErrorText(pco_err,Command_PCO_Error_String,CCD_GENERAL_ERROR_STRING_LENGTH);
	return Command_PCO_Error_String;
}

/**
 * Routine to convert the BCD (binary coded decimal) number to a normal integer.
 * @param x An unisgned char containing the BCD number (0..100). This is normally passed in a WORD, and we take
 *        the lower byte which contains the encoded number.
 * @return The decoded integer (0..100).
 */
static int Command_BCD_To_Decimal(unsigned char x)
{
    return x - 6 * (x >> 4);
}
